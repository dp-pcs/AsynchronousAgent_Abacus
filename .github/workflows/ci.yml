
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  # Job 1: Lint and Test Frontend
  frontend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: ['apps/web', 'libs/shared']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests for ${{ matrix.workspace }}
      run: npm -w ${{ matrix.workspace }} test
      
    - name: Build ${{ matrix.workspace }}
      run: |
        if [ "${{ matrix.workspace }}" = "apps/web" ]; then
          npm -w ${{ matrix.workspace }} run build
        fi

  # Job 2: Test Backend API
  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        cd services/api
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        cd services/api
        pytest tests/ -v
        
    - name: Run security audit
      run: |
        cd services/api
        pip-audit --desc --format=json --output=audit-results.json || true
        
    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-results
        path: services/api/audit-results.json

  # Job 3: Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install all dependencies
      run: |
        npm ci
        cd services/api && pip install -r requirements.txt
        
    - name: Start API server
      run: |
        cd services/api
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 5
      
    - name: Run integration tests
      run: |
        # Test API health endpoint
        curl -f http://localhost:8000/healthz || exit 1
        echo "API health check passed"
        
        # Test API quiz endpoint
        curl -X POST -H "Content-Type: application/json" \
             -d '{"question":"test","answer":"test"}' \
             http://localhost:8000/quiz/create || exit 1
        echo "API quiz endpoint test passed"

  # Job 4: Security and Quality Checks
  security-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        npm ci
        cd services/api && pip install -r requirements.txt
        
    - name: Run npm audit
      run: npm audit --audit-level=moderate || true
      
    - name: Run Python security audit
      run: |
        cd services/api
        pip-audit --desc || true

  # Job 5: Build and Deploy (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, integration-test, security-quality]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Build frontend
      run: |
        npm ci
        npm -w apps/web run build
        
    - name: Deploy notification
      run: |
        echo "Deployment would happen here"
        echo "Frontend built successfully"
        echo "API ready for deployment"
